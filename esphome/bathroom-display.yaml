esphome:
  name: bathroom-display
  friendly_name: Bathroom Display
  min_version: 2024.11.0
  on_boot:
    priority: -100
    then:
      - component.update: ha_time
      - wait_until:
          condition:
            all: 
              - api.connected:
              - time.has_time:
          timeout: 120s
      - if:
          condition:
            not: 
              api.connected:
          then:
            - switch.turn_on: enable_pin
      - delay: 10s
      - lambda: 'id(initial_data_received) = true;'
      - script.execute: update_screen
  includes:
    - fonts/bathroom_display_icon_maps.h
    - libs.h

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0
  level: NONE

# Enable Home Assistant API
api:
  encryption:
    key: "ikxtdJBVHi0PpNP6SFj6i8M5pcqAhtwWJ5o2cmejlmA="
  reboot_timeout: '1min'
  on_client_connected:
    - homeassistant.action:
        action: weather.get_forecasts
        data:
          type: daily
          device_id: 594bc0f484d59b52a5d00122bf96b4eb

ota:
  - platform: esphome
    password: "599e4614660396dbc04670727aec8242"

wifi:
  power_save_mode: LIGHT
  fast_connect: true
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.26
    gateway: 192.168.1.1
    subnet: 255.255.255.0

captive_portal:

switch:
  - platform: gpio
    name: "Enable Pin"
    id: enable_pin
    pin: 23

################################################################################

button:
  - platform: template
    name: "E Ink - Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen
  - platform: template
    name: "E Ink - Clear Screen"
    entity_category: config
    on_press:
      - script.execute: clear_screen

# Global variables for detecting if the display needs to be refreshed. (Thanks @paviro!)
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: data_screen_off
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

# Script for updating screen - Refresh display and publish refresh count and time. (Thanks @paviro!)
script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - lambda: 'id(data_screen_off) = false;'
      - component.update: epaper_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - delay: 5s
      - switch.turn_on: enable_pin
  - id: clear_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - lambda: 'id(data_screen_off) = true;'
      - component.update: epaper_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - delay: 5s
      - switch.turn_on: enable_pin

font:
  - file:
      type: "gfonts"
      family: "Roboto"
      weight: 500
    size: 20
    id: font_light
  - file:
      type: "gfonts"
      family: "Roboto"
      weight: 700
    id: font_large_bold
    size: 108
  - file:
      type: "gfonts"
      family: "Roboto"
      weight: 900
    id: font_title
    size: 40
  - file:
      type: "gfonts"
      family: "Roboto"
      weight: 700
    id: font_time
    size: 46
  - file:
      type: "gfonts"
      family: "Roboto"
      weight: 700
    id: font_small_bold
    size: 22
  - file:
      type: "gfonts"
      family: "Roboto"
      weight: 500
    id: font_small
    size: 18

  # Weather Icons should be font glyphs to reduce compile size
  - file:
      type: "gfonts"
      family: "Material Symbols Rounded"
    id: material_icon_weather_large
    size: 96
    glyphs: &weather-glyphs
      - "\U0000F157" # clear
      - "\U0000F159" # clear-night
      - "\U0000F15B" # cloudy
      - "\U0000E645" # exceptional
      - "\U0000E188" # fog
      - "\U0000F67F" # hail
      - "\U0000EC1C" # lightning
      - "\U0000EBDB" # lightning-rainy
      - "\U0000F172" # partlycloudy
      - "\U0000F61F" # pouring
      - "\U0000F176" # rainy
      - "\U0000E2CD" # snowy
      - "\U0000F61D" # snowy-rainy
      - "\U0000E81A" # sunny
      - "\U0000EFD8" # windy
      - "\U0000EC0C" # windy-variant
  - file:
      type: "gfonts"
      family: "Material Symbols Outlined"
    id: material_icon_weather
    size: 36
    glyphs: *weather-glyphs

image:
  binary:
    - file: mdi:scale-bathroom
      id: scale
      resize: 64x64
    - file: mdi:trending-up
      id: trending_up
      resize: 64x64
    - file: mdi:trending-neutral
      id: trending_flat
      resize: 64x64
    - file: mdi:trending-down
      id: trending_down
      resize: 64x64

sensor:
  - platform: homeassistant
    entity_id: sensor.weight_gurus_cory_ginsberg_weight
    id: current_weight
  - platform: homeassistant
    entity_id: sensor.weight_trend
    id: weight_trend

text_sensor:
  - platform: homeassistant
    entity_id: sensor.last_recorded_weigh_in
    id: last_recorded_weigh_in

### Calendar Sensors ###########################################################
  - platform: homeassistant
    entity_id: sensor.next_calendar_event_string
    id: next_cal_event

##### Weather ##################################################################

  # Current
  - platform: homeassistant
    entity_id: weather.lincoln_ave_weather
    attribute: temperature
    id: weather_temperature_now
  - platform: homeassistant
    entity_id: weather.lincoln_ave_weather
    id: weather_condition_now

  # Today
  - platform: homeassistant
    entity_id: sensor.today_s_condition
    id: weather_condition_0
  - platform: homeassistant
    entity_id: sensor.today_s_high
    id: weather_temperature_0
  - platform: homeassistant
    entity_id: sensor.today_s_low
    id: weather_low_0
  # Tomorrow
  - platform: homeassistant
    entity_id: sensor.tomorrow_s_condition
    id: weather_condition_1
  - platform: homeassistant
    entity_id: sensor.tomorrow_s_high
    id: weather_temperature_1
  - platform: homeassistant
    entity_id: sensor.tomorrow_s_low
    id: weather_low_1
  # 2 Days
  - platform: homeassistant
    entity_id: sensor.2_day_s_condition
    id: weather_condition_2
  - platform: homeassistant
    entity_id: sensor.2_day_s_high
    id: weather_temperature_2
  - platform: homeassistant
    entity_id: sensor.2_day_s_date
    id: weather_timestamp_2
  - platform: homeassistant
    entity_id: sensor.2_day_s_low
    id: weather_low_2
  # 3 Days
  - platform: homeassistant
    entity_id: sensor.3_day_s_condition
    id: weather_condition_3
  - platform: homeassistant
    entity_id: sensor.3_day_s_high
    id: weather_temperature_3
  - platform: homeassistant
    entity_id: sensor.3_day_s_date
    id: weather_timestamp_3
  - platform: homeassistant
    entity_id: sensor.3_day_s_low
    id: weather_low_3

time:
  - platform: homeassistant
    id: ha_time
    timezone: America/Chicago

################################################################################

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14
  miso_pin: GPIO12
    
display:
  - platform: waveshare_epaper
    reset_duration: 2ms
    cs_pin: 
      number: GPIO15
      ignore_strapping_warning: true
    dc_pin: GPIO27
    busy_pin: 
      number: GPIO25
      inverted: True
    reset_pin: GPIO26
    model: 7.50inV2p
    update_interval: never
    rotation: 270
    id: epaper_display
    lambda: |-
      auto color_white = Color(0, 0, 0, 0);
      auto color_black = Color(255, 255, 255, 0);

      // Fill background.
      it.fill(color_white);

      //////////////////// Date ////////////////////
      esphome::ESPTime now = id(ha_time).now();
      char month_buf[80];
      char weekday_buf[80];
      char* date_buf;
      if(now.is_valid()) {
        now.strftime(month_buf,80,"%B");
        now.strftime(weekday_buf,80,"%A");
        asprintf(&date_buf, "%i", now.day_of_month);
      } else { //Temp dates if date isn't ready
        sprintf(month_buf, "%s", "January");
        sprintf(weekday_buf, "%s", "Thursday");
        asprintf(&date_buf, "%s", "1");
      }
      it.printf(240, 50, id(font_time), color_black, TextAlign::CENTER, "%s, %s %s", weekday_buf, month_buf, date_buf);
      it.print(240, 100, id(font_light), color_black, TextAlign::CENTER, id(next_cal_event).state.c_str());
      
      //////////////////// Weight ////////////////////
      it.image(135, 223, id(scale), ImageAlign::CENTER);
      it.printf(135, 281, id(font_title), color_black, TextAlign::CENTER, "%.1f lbs", id(current_weight).state);
      it.print(135, 325, id(font_light), color_black, TextAlign::CENTER, "Last weigh-in:");
      it.print(135, 355, id(font_small_bold), color_black, TextAlign::CENTER, id(last_recorded_weigh_in).state.c_str());
      // Weight Trend
      auto weight_trend_f = id(weight_trend).state;
      float abs_trend = std::abs(weight_trend_f);
      char* gained_or_lost;
      BaseImage* trending_icon;
      if (weight_trend_f > 0) {
        trending_icon = id(trending_up);
        asprintf(&gained_or_lost, "%s", "gained");
      } else if (weight_trend_f > 0) {
        trending_icon = id(trending_down);
        asprintf(&gained_or_lost, "%s", "lost");
      } else {
        trending_icon = id(trending_flat);
        asprintf(&gained_or_lost, "%s", "lost");
      }
      it.image(360, 223, trending_icon, ImageAlign::CENTER);
      it.printf(360, 270, id(font_light), color_black, TextAlign::CENTER, "You've %s", gained_or_lost);
      it.printf(360, 311, id(font_title), color_black, TextAlign::CENTER, "%.1f lbs", abs_trend);
      it.print(360, 350, id(font_light), color_black, TextAlign::CENTER, "In the last 2 weeks");

      //////////////////// Weather ////////////////////
      // Current Weather
      it.printf(125, 420, id(material_icon_weather_large), color_black, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_now).state.c_str()].c_str());
      it.printf(300, 420, id(font_large_bold), color_black, TextAlign::TOP_CENTER, "%s°F", id(weather_temperature_now).state.c_str());
      // 4 Day Forecast
      int day0_x = 90; int day1_x = 190; int day2_x = 290; int day3_x = 390;
      int top_row = 564; int middle_row = 595; int bottom_row = 643; int bottom_bottom_row = 673;
      it.print(day0_x, top_row, id(font_light), color_black, TextAlign::TOP_CENTER, "Tod");
      it.printf(day0_x, middle_row, id(material_icon_weather), color_black, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_0).state.c_str()].c_str());
      it.printf(day0_x, bottom_row, id(font_small_bold), color_black, TextAlign::TOP_CENTER, "%s°F", id(weather_temperature_0).state.c_str());
      it.printf(day0_x, bottom_bottom_row, id(font_small), color_black, TextAlign::TOP_CENTER, "%s°F", id(weather_low_0).state.c_str());
      it.print(day1_x, top_row, id(font_light), color_black, TextAlign::TOP_CENTER, "Tom");
      it.printf(day1_x, middle_row, id(material_icon_weather), color_black, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_1).state.c_str()].c_str());
      it.printf(day1_x, bottom_row, id(font_small_bold), color_black, TextAlign::TOP_CENTER, "%s°F", id(weather_temperature_1).state.c_str());
      it.printf(day1_x, bottom_bottom_row, id(font_small), color_black, TextAlign::TOP_CENTER, "%s°F", id(weather_low_1).state.c_str());
      it.printf(day2_x, top_row, id(font_light), color_black, TextAlign::TOP_CENTER, "%s", id(weather_timestamp_2).state.c_str());
      it.printf(day2_x, middle_row, id(material_icon_weather), color_black, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_2).state.c_str()].c_str());
      it.printf(day2_x, bottom_row, id(font_small_bold), color_black, TextAlign::TOP_CENTER, "%s°F", id(weather_temperature_2).state.c_str());
      it.printf(day2_x, bottom_bottom_row, id(font_small), color_black, TextAlign::TOP_CENTER, "%s°F", id(weather_low_2).state.c_str());
      it.printf(day3_x, top_row, id(font_light), color_black, TextAlign::TOP_CENTER, "%s", id(weather_timestamp_3).state.c_str());
      it.printf(day3_x, middle_row, id(material_icon_weather), color_black, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_3).state.c_str()].c_str());
      it.printf(day3_x, bottom_row, id(font_small_bold), color_black, TextAlign::TOP_CENTER, "%s°F", id(weather_temperature_3).state.c_str());
      it.printf(day3_x, bottom_bottom_row, id(font_small), color_black, TextAlign::TOP_CENTER, "%s°F", id(weather_low_3).state.c_str());

      // Bottom Bar
      it.print(237, 750, id(font_small), color_black, TextAlign::BOTTOM_CENTER, "Last updated:");
      it.strftime(237, 780, id(font_small_bold), color_black, TextAlign::BOTTOM_CENTER, "%m-%d-%Y %H:%M", now);
